(function() {
    'use strict';
    
    Lampa.Platform.tv();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Lampa
    if (Lampa.Manifest.version !== 'Lampa32') {
        Lampa.Storage.set('no_parser', true);
        console.log('Lampa version not supported');
        return;
    }
    
    Lampa.Storage.set('parser_use', true);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
    var protocol = location.protocol === 'https:' ? 'https://' : 'http://';
    
    // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
    var servers = [
        '62.60.149.237:2601',      // Lampa32
        'jacblack.ru:9117',        // ByLampa Jackett / Jac Black
        '62.60.149.237:8443',      // ?
        'jr.maxvol.pro',           // JR Maxvol Pro
        'https://jac-red.ru',      // Jacred RU
        'jacred.viewbox.dev',      // Jacred Viewbox Dev
        'jacred.pro',              // Jacred Pro
        'jacred.xyz'               // Jacred.xyz
    ];
    
    var parserNames = [
        'Lampa32',
        'ByLampa Jackett',
        'Jacred.xyz', 
        'JR Maxvol Pro',
        'Jacred RU',
        'Jacred Viewbox Dev',
        'Jacred Pro',
        'Jac Black'
    ];
    
    var parserConfigs = {
        'jac_lampa32_ru': {
            url: '62.60.149.237:2601',
            key: '',
            interview: 'false',
            lang: 'lg',
            search: true
        },
        'bylampa_jackett': {
            url: 'jacblack.ru:9117',
            key: '34DPECDY',
            interview: 'all',
            lang: 'df',
            search: true
        },
        'jacred_xyz': {
            url: 'jacred.xyz',
            key: '',
            interview: 'healthy',
            lang: 'lg',
            search: true
        },
        'jr_maxvol_pro': {
            url: 'jr.maxvol.pro',
            key: '',
            interview: 'all',
            lang: 'lg',
            search: true
        },
        'jacred_ru': {
            url: 'https://jac-red.ru',
            key: '',
            interview: 'false',
            lang: 'lg',
            search: true
        },
        'jacred_viewbox_dev': {
            url: 'jacred.viewbox.dev',
            key: '64e364',
            interview: 'false',
            lang: 'lg',
            search: true
        },
        'jacred_pro': {
            url: 'jacred.pro',
            key: '',
            interview: 'all',
            lang: 'lg',
            search: true
        },
        'jac_black': {
            url: 'jacblack.ru:9117',
            key: '',
            interview: 'false',
            lang: 'lg',
            search: true
        }
    };
    
    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞
    function checkParserAvailability(serverUrl, title, config) {
        return new Promise((resolve) => {
            var checkProtocol = serverUrl.startsWith('https://') ? 'https://' : protocol;
            var apiKey = config.key || '';
            var apiUrl = checkProtocol + serverUrl.replace(/^https?:\/\//, '') + '/api/v2.0/indexers/status:healthy/results?apikey=' + apiKey;
            
            var xhr = new XMLHttpRequest();
            xhr.timeout = 3000;
            xhr.open('GET', apiUrl, true);
            
            xhr.onload = function() {
                if (xhr.status === 200) {
                    resolve({ ...config, title: '‚úî ' + title, status: 'active' });
                } else {
                    resolve({ ...config, title: '‚úò ' + title, status: 'inactive' });
                }
            };
            
            xhr.onerror = xhr.ontimeout = function() {
                resolve({ ...config, title: '‚úò ' + title, status: 'inactive' });
            };
            
            xhr.send();
        });
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞
    function setupParserConfig(parserId) {
        if (!parserConfigs[parserId]) return;
        
        var config = parserConfigs[parserId];
        Lampa.Storage.set('jackett_url', config.url);
        Lampa.Storage.set('jackett_key', config.key);
        Lampa.Storage.set('jackett_interview', config.interview);
        Lampa.Storage.set('parse_in_search', config.search);
        Lampa.Storage.set('parse_lang', config.lang);
        Lampa.Storage.set('jackett_urltwo', parserId);
        
        console.log('Parser configured:', parserId, config);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    function initDefaultParser() {
        if (!Lampa.Storage.get('jack', false)) {
            Lampa.Storage.set('jack', 'true');
            setupParserConfig('jacred_xyz');
            console.log('Default parser initialized: jacred_xyz');
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—Å–µ—Ä–∞
    function createParserMenu() {
        var items = Object.keys(parserConfigs).map(key => {
            var config = parserConfigs[key];
            return {
                title: config.title || key,
                id: key,
                ...config
            };
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–µ—Ä–æ–≤
        Promise.all(
            items.map(item => checkParserAvailability(item.url, item.title || item.id, item))
        ).then(checkedItems => {
            Lampa.Select.show({
                title: '–í—ã–±—Ä–∞—Ç—å –ø–∞—Ä—Å–µ—Ä',
                items: checkedItems.map(item => ({
                    title: item.title,
                    id: item.id,
                    status: item.status
                })),
                onBack: () => {
                    // –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É
                },
                onSelect: (item) => {
                    setupParserConfig(item.id);
                    
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    setTimeout(() => {
                        if (window.location.reload) {
                            window.location.reload();
                        }
                    }, 1000);
                }
            });
        }).catch(err => {
            console.error('Error checking parsers:', err);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            Lampa.Select.show({
                title: '–í—ã–±—Ä–∞—Ç—å –ø–∞—Ä—Å–µ—Ä',
                items: Object.keys(parserConfigs).map(key => ({
                    title: parserConfigs[key].title || key,
                    id: key
                })),
                onSelect: (item) => setupParserConfig(item.id)
            });
        });
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ Lampa Settings
    if (Lampa.Settings && Lampa.Settings.main) {
        Lampa.Settings.main({
            component: 'parser',
            name: 'jackett_urltwo',
            type: 'select',
            values: {
                'no_parser': '–ë–µ–∑ –ø–∞—Ä—Å–µ—Ä–∞',
                ...Object.fromEntries(
                    Object.keys(parserConfigs).map(key => [key, parserConfigs[key].title || key])
                )
            },
            default: 'jacred_xyz',
            field: {
                name: 'üîß –í—ã–±–æ—Ä Jackett –ø–∞—Ä—Å–µ—Ä–∞',
                description: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤'
            },
            onChange: (value) => {
                if (value === 'no_parser') {
                    Lampa.Storage.set('jackett_url', '');
                    Lampa.Storage.set('jackett_key', '');
                    Lampa.Storage.set('parse_in_search', false);
                } else {
                    setupParserConfig(value);
                }
                Lampa.Settings.update && Lampa.Settings.update();
            },
            onRender: (html) => {
                setTimeout(() => {
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
                    var buttonHtml = `
                        <div class="settings-folder" style="padding:0!important">
                            <div style="width:1.3em;height:1.3em;padding-right:.1em">
                                <!-- SVG –∏–∫–æ–Ω–∫–∞ -->
                            </div>
                            <div style="font-size:1.0em">
                                <div style="padding:0.3em 0.3em;padding-top:0;">
                                    <div style="background:#d99821;padding:0.5em;border-radius:0.4em;cursor:pointer" onclick="createParserMenu()">
                                        <div style="line-height:0.3;">–í—ã–±—Ä–∞—Ç—å –ø–∞—Ä—Å–µ—Ä</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    
                    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
                    $(html).find('select').after(buttonHtml);
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ Jackett –∞–∫—Ç–∏–≤–µ–Ω
                    if (Lampa.Storage.field && Lampa.Storage.field('parser_torrent_type') === 'jackett') {
                        $(html).find('[data-name="jackett_url"]').hide();
                        $(html).find('[data-name="jackett_key"]').hide();
                    }
                }, 100);
            }
        });
    }
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (Lampa.Storage && Lampa.Storage.follow) {
        Lampa.Storage.follow('parser', (e) => {
            if (e.name === 'jackett_urltwo' && e.value) {
                setupParserConfig(e.value);
            }
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    var initTimer = setInterval(() => {
        if (typeof Lampa !== 'undefined' && Lampa.Storage) {
            clearInterval(initTimer);
            initDefaultParser();
        }
    }, 100);
    
    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é (–¥–ª—è –∫–Ω–æ–ø–∫–∏)
    window.createJackettMenu = createParserMenu;
    
    console.log('Jackett parser module loaded');
})();
